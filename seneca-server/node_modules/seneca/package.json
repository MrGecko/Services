{
  "_args": [
    [
      {
        "raw": "seneca",
        "scope": null,
        "escapedName": "seneca",
        "name": "seneca",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/mrgecko/Documents/Dev/Projects/services/seneca-server"
    ]
  ],
  "_from": "seneca@latest",
  "_id": "seneca@3.3.0",
  "_inCache": true,
  "_location": "/seneca",
  "_nodeVersion": "4.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/seneca-3.3.0.tgz_1486433479342_0.557387207634747"
  },
  "_npmUser": {
    "name": "rjrodger",
    "email": "richard.rodger@nearform.com"
  },
  "_npmVersion": "2.15.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "seneca",
    "scope": null,
    "escapedName": "seneca",
    "name": "seneca",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/seneca/-/seneca-3.3.0.tgz",
  "_shasum": "b8c07575fa074284e2407d702ddf35c30fa199bc",
  "_shrinkwrap": null,
  "_spec": "seneca",
  "_where": "/Users/mrgecko/Documents/Dev/Projects/services/seneca-server",
  "author": {
    "name": "Richard Rodger",
    "url": "http://richardrodger.com/"
  },
  "bugs": {
    "url": "https://github.com/senecajs/seneca/issues"
  },
  "contributors": [
    {
      "name": "Adrien Becchis",
      "url": "https://github.com/AdrieanKhisbe"
    },
    {
      "name": "Alexandru Mircea",
      "url": "https://github.com/mirceaalexandru"
    },
    {
      "name": "Adrian Rossouw",
      "url": "http://daemon.co.za"
    },
    {
      "name": "Colin Ihrig",
      "url": "https://github.com/cjihrig"
    },
    {
      "name": "Cristian Ianto",
      "url": "https://github.com/iantocristian"
    },
    {
      "name": "Cristian Kiss",
      "url": "https://github.com/ckiss"
    },
    {
      "name": "David Mark Clements",
      "url": "https://github.com/davidmarkclements"
    },
    {
      "name": "Dean McDonnell",
      "url": "https://github.com/mcdonnelldean"
    },
    {
      "name": "Dominic Tarr",
      "url": "https://github.com/dominictarr"
    },
    {
      "name": "Dustin Deus",
      "url": "https://github.com/StarpTech"
    },
    {
      "name": "Glen Keane",
      "url": "https://github.com/thekemkid"
    },
    {
      "name": "Gege Pincin",
      "url": "https://github.com/Georgette"
    },
    {
      "name": "Jake Pruitt",
      "url": "https://github.com/jakepruitt"
    },
    {
      "name": "Maciej MaÅ‚ecki",
      "url": "http://mmalecki.com"
    },
    {
      "name": "Matteo Collina",
      "url": "https://github.com/mcollina"
    },
    {
      "name": "Marian Radulescu",
      "url": "https://github.com/marianr"
    },
    {
      "name": "Marius Ursache",
      "url": "https://github.com/bamse16"
    },
    {
      "name": "Martin Betak",
      "url": "https://github.com/matobet"
    },
    {
      "name": "Maxence Dalmais",
      "url": "https://github.com/maxired"
    },
    {
      "name": "Mihai Dima",
      "url": "https://github.com/mihaidma"
    },
    {
      "name": "Naomi Feehan",
      "url": "https://github.com/naomifeehan"
    },
    {
      "name": "Paolo Chiodi",
      "url": "https://github.com/paolochiodi"
    },
    {
      "name": "Peter Elger",
      "url": "https://github.com/pelger"
    },
    {
      "name": "Reto Inderbitzin",
      "url": "https://github.com/indr"
    },
    {
      "name": "Reid Rankin",
      "url": "https://github.com/reidrankin"
    },
    {
      "name": "Tane Piper",
      "url": "https://github.com/tanepiper"
    },
    {
      "name": "Wyatt Preul",
      "url": "https://github.com/geek"
    },
    {
      "name": "Vald Houbiev",
      "url": "https://github.com/vladgolubev"
    },
    {
      "name": "Vito Tardia",
      "url": "https://github.com/vtardia"
    }
  ],
  "dependencies": {
    "archy": "1.0.0",
    "eraro": "0.4.1",
    "gate-executor": "1.1.1",
    "gex": "0.2.2",
    "json-stringify-safe": "5.0.1",
    "jsonic": "0.2.2",
    "lodash": "4.15.0",
    "lru-cache": "4.0.1",
    "minimist": "1.2.0",
    "nid": "0.3.2",
    "norma": "0.3.0",
    "ordu": "0.1.1",
    "patrun": "0.5.1",
    "rolling-stats": "0.1.1",
    "semver": "5.3.0",
    "seneca-log-filter": "0.1.0",
    "seneca-transport": "2.1.0",
    "use-plugin": "0.3.2"
  },
  "description": "A Microservices Framework for Node.js",
  "devDependencies": {
    "async": "2.0.x",
    "bench": "0.3.x",
    "body-parser": "1.15.x",
    "code": "3.0.x",
    "connect": "3.4.x",
    "connect-query": "0.2.x",
    "coveralls": "2.11.x",
    "docco": "0.7.x",
    "eslint-config-seneca": "3.x.x",
    "eslint-plugin-hapi": "4.x.x",
    "eslint-plugin-standard": "2.x.x",
    "lab": "11.0.x",
    "seneca-entity": "1.3.x",
    "seneca-error-test": "0.2.x"
  },
  "directories": {},
  "dist": {
    "shasum": "b8c07575fa074284e2407d702ddf35c30fa199bc",
    "tarball": "https://registry.npmjs.org/seneca/-/seneca-3.3.0.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "files": [
    "LICENSE",
    "README.md",
    "CHANGES.md",
    "lib",
    "seneca.js"
  ],
  "gitHead": "38595f6e4909c1ac71f073a49a772a177a1af690",
  "homepage": "http://senecajs.org",
  "keywords": [
    "micro",
    "service",
    "microservice",
    "micro-service",
    "microservices",
    "micro-services",
    "services",
    "micro services",
    "micro service",
    "framework",
    "minimum",
    "viable",
    "product",
    "toolkit",
    "startup"
  ],
  "license": "MIT",
  "main": "seneca.js",
  "maintainers": [
    {
      "name": "matteo.collina",
      "email": "hello@matteocollina.com"
    },
    {
      "name": "mcdonnelldean",
      "email": "mcdonnelldean@outlook.com"
    },
    {
      "name": "naomifeehanmoran",
      "email": "naomi.feehan.moran@gmail.com"
    },
    {
      "name": "rjrodger",
      "email": "richard.rodger@nearform.com"
    },
    {
      "name": "wyatt",
      "email": "wpreul@gmail.com"
    }
  ],
  "name": "seneca",
  "optionalDependencies": {},
  "readme": "![Logo][]\n> A Node.js toolkit for Microservice architectures\n\n# seneca\n[![Npm][BadgeNpm]][Npm]\n[![NpmFigs][BadgeNpmFigs]][Npm]\n[![Travis][BadgeTravis]][Travis]\n[![Coveralls][BadgeCoveralls]][Coveralls]\n[![Gitter][BadgeGitter]][Gitter]\n\n- __Lead Maintainer:__ [Richard Rodger][Lead]\n- __Sponsor:__ [nearForm][Sponsor]\n- __Node:__ 4.x, 5.x\n\nSeneca is a toolkit for writing microservices and organizing the business logic of your\napp. You can break down your app into \"stuff that happens\", rather than focusing on data\nmodels or managing dependencies.\n\nSeneca provides,\n\n- __pattern matching:__ a wonderfully flexible way to handle business requirements\n\n- __transport independence:__ how messages get to the right server is not something you\nshould have to worry about\n\n- __maturity:__ 5 years in production (before we called it _microservices_), but was\nonce taken out by [lightning][]\n\n- __plus:__ a deep and wide ecosystem of [plugins][]\n\nUse this module to define commands that work by taking in some JSON, and, optionally,\nreturning some JSON. The command to run is selected by pattern-matching on the the input\nJSON. There are built-in and optional sets of commands that help you build Minimum Viable\nProducts: data storage, user management, distributed logic, caching, logging, etc. And you\ncan define your own product by breaking it into a set of commands - \"stuff that happens\".\nThat's pretty much it.\n\nIf you're using this module, and need help, you can:\n\n- Post a [github issue][Issue],\n- Tweet to [@senecajs][Tweet],\n- Ask on the [Gitter][Gitter].\n\nIf you are new to Seneca in general, please take a look at [senecajs.org][Org]. We have\neverything from tutorials to sample apps to help get you up and running quickly.\n\nSeneca's source can be read in an annotated fashion by running `npm run annotate`. An\nannotated version of each file will be generated in `./docs/`.\n\n## Install\nTo install via npm,\n\n```\nnpm install seneca\n```\n\n## Test\nTo run tests locally,\n\n```\nnpm run test\n```\n\nTo obtain a coverage report,\n\n```\nnpm run coverage; open docs/coverage.html\n```\n\n## Quick Example\n\n```js\n'use strict'\n\nvar Seneca = require('seneca')\n\n\n// Functionality in seneca is composed into simple\n// plugins that can be loaded into seneca instances.\n\n\nfunction rejector () {\n  this.add('cmd:run', (msg, done) => {\n    return done(null, {tag: 'rejector'})\n  })\n}\n\nfunction approver () {\n  this.add('cmd:run', (msg, done) => {\n    return done(null, {tag: 'approver'})\n  })\n}\n\nfunction local () {\n  this.add('cmd:run', function (msg, done) {\n    this.prior(msg, (err, reply) => {\n      return done(null, {tag: reply ? reply.tag : 'local'})\n    })\n  })\n}\n\n\n// Services can listen for messages using a variety of\n// transports. In process and http are included by default.\n\n\nSeneca()\n  .use(approver)\n  .listen({type: 'http', port: '8260', pin: 'cmd:*'})\n\nSeneca()\n  .use(rejector)\n  .listen(8270)\n\n\n// Load order is important, messages can be routed\n// to other services or handled locally. Pins are\n// basically filters over messages\n\n\nfunction handler (err, reply) {\n  console.log(err, reply)\n}\n\nSeneca()\n  .use(local)\n  .act('cmd:run', handler)\n\nSeneca()\n  .client({port: 8270, pin: 'cmd:run'})\n  .client({port: 8260, pin: 'cmd:run'})\n  .use(local)\n  .act('cmd:run', handler)\n\nSeneca()\n  .client({port: 8260, pin: 'cmd:run'})\n  .client({port: 8270, pin: 'cmd:run'})\n  .use(local)\n  .act('cmd:run', handler)\n\n\n// Output\n// null { tag: 'local' }\n// null { tag: 'approver' }\n// null { tag: 'rejector' }\n```\n\n\n## Why we built this?\n\nSo that it doesn't matter,\n\n   * __who__ _provides_ the functionality,\n   * __where__ it _lives_ (on the network),\n   * __what__ it _depends_ on,\n   * it's __easy__ to _define blocks of functionality_ (plugins!).\n\nSo long as _some_ command can handle a given JSON document, you're good.\n\nHere's an example:\n\n```javascript\nvar seneca = require('seneca')()\n\nseneca.add({cmd: 'salestax'}, function (msg, done) {\n  var rate  = 0.23\n  var total = msg.net * (1 + rate)\n  done(null, {total: total})\n})\n\nseneca.act({cmd: 'salestax', net: 100}, function (err, result) {\n  console.log(result.total)\n})\n```\n\nIn this code, whenever seneca sees the pattern `{cmd:'salestax'}`, it executes the\nfunction associated with this pattern, which calculates sales tax. There is nothing\nspecial about the property `cmd` . It is simply the property we want to pattern match.\nYou could look for `foo` for all seneca cares! Yah!\n\nThe `seneca.add` method adds a new pattern, and the function to execute whenever that\npattern occurs.\n\nThe `seneca.act` method accepts an object, and runs the command, if any, that matches.\n\nWhere does the sales tax rate come from? Let's try it again:\n\n```js\nseneca.add({cmd: 'config'}, function (msg, done) {\n  var config = {rate: 0.23}\n  var value = config[msg.prop]\n  done(null, {value: value})\n})\n\nseneca.add({cmd: 'salestax'}, function (msg, done) {\n  seneca.act({cmd: 'config', prop: 'rate'}, function (err, result) {\n    var rate  = parseFloat(result.value)\n    var total = msg.net * (1 + rate)\n    done(null, {total: total})\n  })\n})\n\nseneca.act({cmd: 'salestax', net: 100}, function (err, result) {\n  console.log(result.total)\n})\n```\n\nThe `config` command provides you with your configuration. This is cool because it\ndoesn't matter _where_ it gets the configuration from - hard-coded, file system,\ndatabase, network service, whatever. Did you have to define an abstraction API to make\nthis work? Nope.\n\nThere's a little but too much verbosity here, don't you think? Let's fix that:\n\n\n```javascript\nseneca.act('cmd:salestax,net:100', function (err, result) {\n  console.log(result.total)\n})\n```\n\nInstead of providing an object, you can provide a string using an\n[abbreviated form][Jsonic] of JSON. In fact, you\ncan provide both:\n\n```javascript\nseneca.act('cmd:salestax', {net: 100}, function (err, result) {\n  console.log(result.total)\n})\n```\n\nThis is a _very convenient way of combining a pattern and parameter data_.\n\n### Programmer Anarchy\n\nThe way to build Node.js systems, is to build lots of little\nprocesses. Here's a great talk explaining why you should do this:\n[Programmer Anarchy](http://vimeo.com/43690647).\n\nSeneca makes this really easy. Let's put configuration out on the\nnetwork into its own process:\n\n```javascript\nseneca.add({cmd: 'config'}, function (msg, done) {\n  var config = {rate: 0.23}\n  var value = config[msg.prop]\n  done(null, { value: value })\n})\n\nseneca.listen()\n```\n\nThe `listen` method starts a web server that listens for JSON\nmessages. When these arrive, they are submitted to the local Seneca\ninstance, and executed as actions in the normal way.  The result is\nthen returned to the client as the response to the HTTP\nrequest. Seneca can also listen for actions via a message bus.\n\nYour implementation of the configuration code _stays the same_.\n\nThe client code looks like this:\n\n\n```javascript\nseneca.add({cmd: 'salestax'}, function (msg, done) {\n  seneca.act({cmd: 'config', prop: 'rate' }, function (err, result) {\n    var rate  = parseFloat(result.value)\n    var total = msg.net * (1 + rate)\n    done(null, { total: total })\n  })\n})\n\nseneca.client()\n\nseneca.act('cmd:salestax,net:100', function (err, result) {\n  console.log(result.total)\n})\n```\n\nOn the client-side, calling `seneca.client()` means that Seneca will\nsend any actions it cannot match locally out over the network. In this\ncase, the configuration server will match the `cmd:config` pattern and\nreturn the configuration data.\n\nAgain, notice that your sales tax code _does not change_. It does not\nneed to know where the configuration comes from, who provides it, or\nhow.\n\nYou can do this with every command.\n\n### Keeping the Business Happy\n\nThe thing about business requirements is that they have no respect for\ncommon sense, logic or orderly structure. The real world is messy.\n\nIn our example, let's say some countries have single sales tax rate,\nand others have a variable rate, which depends either on locality, or product category.\n\nHere's the code. We'll rip out the configuration code for this example.\n\n```javascript\n// fixed rate\nseneca.add({cmd: 'salestax'}, function (msg, done) {\n  var rate  = 0.23\n  var total = msg.net * (1 + rate)\n  done(null, { total: total })\n})\n\n\n// local rates\nseneca.add({cmd: 'salestax', country: 'US'}, function (msg, done) {\n  var state = {\n    'NY': 0.04,\n    'CA': 0.0625\n    // ...\n  }\n  var rate = state[msg.state]\n  var total = msg.net * (1 + rate)\n  done(null, {total: total})\n})\n\n\n// categories\nseneca.add({ cmd: 'salestax', country: 'IE' }, function (msg, done) {\n  var category = {\n    'top': 0.23,\n    'reduced': 0.135\n    // ...\n  }\n  var rate = category[msg.category]\n  var total = msg.net * (1 + rate)\n  done(null, { total: total })\n})\n\n\nseneca.act('cmd:salestax,net:100,country:DE', function (err, result) {\n  console.log('DE: ' + result.total)\n})\n\nseneca.act('cmd:salestax,net:100,country:US,state:NY', function (err, result) {\n  console.log('US,NY: ' + result.total)\n})\n\nseneca.act('cmd:salestax,net:100,country:IE,category:reduced', function (err, result) {\n  console.log('IE: ' + result.total)\n})\n\n```\n\nIn this case, you provide different implementations for different patterns. This lets you\nisolate complexity into well-defined places. It also means you can deal with special\ncases very easily.\n\n## Contributing\nThe [Senecajs org][Org] encourages participation. If you feel you can help in any way, be\nit with bug reporting, documentation, examples, extra testing, or new features feel free\nto [create an issue][Issue], or better yet, [submit a [Pull Request][Pull]. For more\ninformation on contribution please see our [Contributing][Contrib] guide.\n\n## License\nCopyright (c) 2015-2016 Richard Rodger and other contributors;\nLicensed under __[MIT][Lic]__.\n\n\n\n[BadgeCoveralls]: https://coveralls.io/repos/senecajs/seneca/badge.svg?branch=master&service=github\n[BadgeNpm]: https://badge.fury.io/js/seneca.svg\n[BadgeGitter]: https://badges.gitter.im/senecajs/seneca.svg\n[BadgeNpmFigs]: https://img.shields.io/npm/dm/seneca.svg?maxAge=2592000\n[BadgeTravis]: https://travis-ci.org/senecajs/seneca.svg?branch=master\n[CoC]: http://senecajs.org/code-of-conduct\n[Contrib]: http://senecajs.org/contribute\n[Coveralls]: https://coveralls.io/github/senecajs/seneca?branch=master\n[Gitter]: https://gitter.im/senecajs/seneca\n[Issue]: https://github.com/senecajs/seneca/issues/new\n[Lead]: https://github.com/rjrodger\n[Lic]: ./LICENSE\n[Logo]: http://senecajs.org/files/assets/seneca-logo.jpg\n[Npm]: https://www.npmjs.com/package/seneca\n[Org]: http://senecajs.org/\n[Pull]: https://github.com/senecajs/seneca/pulls\n[Sponsor]: http://nearform.com\n[Travis]: https://travis-ci.org/senecajs/seneca?branch=master\n[Tweet]: https://twitter.com/senecajs\n\n\n\n[Jsonic]: https//github.com/rjrodger/jsonic\n[Lightning]: http://aws.amazon.com/message/67457/\n[Plugins]: https://github.com/search?utf8=%E2%9C%93&q=seneca&type=Repositories&ref=searchresults\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/senecajs/seneca.git"
  },
  "scripts": {
    "annotate": "docco seneca.js lib/*.js -o docs/annotated",
    "coverage": "lab -v -P test -L -t 80 -r html > docs/coverage.html",
    "coveralls": "lab -s -P test -r lcov | coveralls",
    "smoke": "node test/stubs/launch.js",
    "test": "lab -v -P test -L -t 80"
  },
  "version": "3.3.0"
}
