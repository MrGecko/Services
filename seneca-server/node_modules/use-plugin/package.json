{
  "_args": [
    [
      {
        "raw": "use-plugin@0.3.2",
        "scope": null,
        "escapedName": "use-plugin",
        "name": "use-plugin",
        "rawSpec": "0.3.2",
        "spec": "0.3.2",
        "type": "version"
      },
      "/Users/mrgecko/Documents/Dev/Projects/services/seneca-server/node_modules/seneca"
    ]
  ],
  "_from": "use-plugin@0.3.2",
  "_id": "use-plugin@0.3.2",
  "_inCache": true,
  "_location": "/use-plugin",
  "_nodeVersion": "4.5.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/use-plugin-0.3.2.tgz_1486394399396_0.9108938507270068"
  },
  "_npmUser": {
    "name": "rjrodger",
    "email": "richard.rodger@nearform.com"
  },
  "_npmVersion": "2.15.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "use-plugin@0.3.2",
    "scope": null,
    "escapedName": "use-plugin",
    "name": "use-plugin",
    "rawSpec": "0.3.2",
    "spec": "0.3.2",
    "type": "version"
  },
  "_requiredBy": [
    "/seneca"
  ],
  "_resolved": "https://registry.npmjs.org/use-plugin/-/use-plugin-0.3.2.tgz",
  "_shasum": "01f8b872f24ccdea4fd7958f057f4d55bf1fdff4",
  "_shrinkwrap": null,
  "_spec": "use-plugin@0.3.2",
  "_where": "/Users/mrgecko/Documents/Dev/Projects/services/seneca-server/node_modules/seneca",
  "author": {
    "name": "Richard Rodger",
    "url": "http://richardrodger.com"
  },
  "bugs": {
    "url": "https://github.com/rjrodger/use-plugin/issues"
  },
  "dependencies": {
    "eraro": "0.4",
    "lodash": "4.15",
    "nid": "0.3",
    "norma": "0.3"
  },
  "description": "Generic plugin loader functionality for Node.js frameworks.",
  "devDependencies": {
    "docco": "0.7",
    "jshint": "2.9",
    "mocha": "3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "01f8b872f24ccdea4fd7958f057f4d55bf1fdff4",
    "tarball": "https://registry.npmjs.org/use-plugin/-/use-plugin-0.3.2.tgz"
  },
  "files": [
    "README.md",
    "LICENSE.txt",
    "use.js"
  ],
  "gitHead": "13cea822bfb58153da2f9f9a0db3855f202c4915",
  "homepage": "https://github.com/rjrodger/use-plugin#readme",
  "keywords": [
    "use",
    "plugin"
  ],
  "license": "MIT",
  "main": "use.js",
  "maintainers": [
    {
      "name": "rjrodger",
      "email": "richard.rodger@nearform.com"
    }
  ],
  "name": "use-plugin",
  "optionalDependencies": {},
  "readme": "# use-plugin\n\n## Generic plugin loader functionality for Node.js frameworks.\n\nFor use in framework modules to provide a plugin mechanism for\nextensions. While a simple _require_ in calling code is a good start,\nthis plugin provides some convenience abstractions over vanilla _requires_\nso that you can offer a more user-friendly interface.\n\n[![Build Status](https://travis-ci.org/rjrodger/use-plugin.png?branch=master)](https://travis-ci.org/rjrodger/use-plugin)\n\n[Annotated Source](http://rjrodger.github.io/use-plugin/doc/use.html)\n\n[![Gitter chat](https://badges.gitter.im/rjrodger/use-plugin.png)](https://gitter.im/rjrodger/use-plugin)\n\n\n# Support\n\nIf you're using this module, feel free to contact us on twitter if you\nhave any questions! :) [@senecajs](http://twitter.com/senecajs)\n\n[![Gitter chat](https://badges.gitter.im/rjrodger/use-plugin.png)](https://gitter.im/rjrodger/use-plugin)\n\nSee the [seneca](http://github.com/rjrodger/seneca) module for an\nexample of practical usage.\n\n\n# Quick example\n\n```JavaScript\n// myframework.js\nmodule.exports = function() {\n  var use = require('use-plugin')({prefix:'foo',module:module})\n\n  return {\n    use: function( plugin_name ) {\n      var plugin_description == use(plugin_name)\n      \n      // call the init function to init the plugin\n      plugin_description.init()\n    }\n  }\n}\n\n// callingcode.js\nvar fm = require('myframework')\n\n// this will try to load:\n// 'bar', 'foo-bar', './foo', './foo-bar'\n// against the framework module, and then the callingcode module\n// nice error messages are thrown if there are problems\nfm.use('bar')\n```\n\n# Install\n\n```bash\nnpm install use-plugin\n```\n\nThere's an [npm module page for use-plugin](https://www.npmjs.org/package/use-plugin).\n\n# Usage\n\nThe module provides a builder function that you call with your desired options.\nIn particular, you should always set your module, as above.\n\nThe builder function returns a plugin loader function that you can use\ninside your framework.  Calling the loader function returns an object\nwith properties that describe the plugin.\n\nIn particular, the point of this module is to resolve (via require),\nthe init function of the plugin, so that you can call it in your\nframework.\n\nPlugins can be loaded in the following ways:\n\n   * By name: `fm.use('bar')`\n   * By name with options: `fm.use('bar', {color:'red'})`\n   * As a function: `fm.use(function(){...})`\n   * As a named function: `fm.use(function bar(){...})`\n   * As a (named) function with options: `fm.use(function bar(){...}, {color:'red'})`\n   * As an object: `fm.use({name:'bar', init:function(){...}})`\n   * As a _require_: `fm.use( require('./bar.js' ) )`\n\nWhen loaded as an Object, you must provide at least the _name_ and\n_init_ function. When loaded as a _require_ note that the returned\nvalue can be any of string, function or object, to which the same\nrules apply. In particular, you need to explicitly provide a _name_\nproperty if you want an explicit name.\n\n# Plugin Name Resolution\n\nThe name of the plugin is determined by the following procedure:\n\n   * Plugin specified as string: the given string.\n   * Plugin specified as function: the Function object name, otherwise generate a name.\n   * Plugin specifed as object: the _name_ property (which is required)\n   \nThe plugin may also have a _tag_. This is a separate string that\nallows multiple plugins with the same name to be loaded, depending on\nyour use-case. To provide a tag, use the name format: _name$tag_, or\nprovide a _tag_ property on the plugin object or function specification.\n\n\n# Options\n\nWhen calling the builder function, you can pass:\n\n   * _module_: The _module_ variable of your framework. \n   * _prefix_: An optional prefix for plugin names. Aallows your users to drop the prefix and use abbreviated plugin names.\n   * _builtin_: Load builtin plugins first from this sub-folder of your framework.\n   * _errmsgprefix_: Prefix string for error messages.\n\n# Plugin Description Object\n\nIf found, an object is returned describing your plugin:\n\n   * _name_ : The resolved name of the plugin. \n   * _tag_ : The resolved tag of the plugin. \n   * _init_ : The resolved initialization function of the plugin.\n   * _options_ : Any user-supplied plugin options provided as the second parameter to the created _use_ function. \n   * _callback_ : Optional user-supplied callback provided as the third parameter to the created _use_ function. You'll have to call this yourself.\n   * _history_ : The actual _require_ search history. Array of _{module:module-path, name:require-path}_.\n   * _search_ : The _require_ paths to search for. \n   * _modulepath_ : Module path where found. \n   * _requirepath_ : Require path where found. \n   * _err_ : Error object, if any. \n   * _found_ : Internal search entry details. \n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/rjrodger/use-plugin.git"
  },
  "scripts": {
    "build": "./build.sh",
    "test": "./test.sh"
  },
  "version": "0.3.2"
}
